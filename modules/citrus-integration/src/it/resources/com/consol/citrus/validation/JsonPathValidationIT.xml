<?xml version="1.0" encoding="UTF-8"?>
<spring:beans xmlns="http://www.citrusframework.org/schema/testcase"
              xmlns:spring="http://www.springframework.org/schema/beans"
              xmlns:http="http://www.citrusframework.org/schema/http/testcase"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                                  http://www.citrusframework.org/schema/testcase http://www.citrusframework.org/schema/testcase/citrus-testcase.xsd
                                  http://www.citrusframework.org/schema/http/testcase http://www.citrusframework.org/schema/http/testcase/citrus-http-testcase.xsd">
  <testcase name="JsonPathValidationIT">
    <meta-info>
      <author>Christoph Deppisch</author>
      <creationdate>2015-07-21</creationdate>
      <status>FINAL</status>
      <last-updated-by>Christoph Deppisch</last-updated-by>
      <last-updated-on>2015-07-21T00:00:00</last-updated-on>
    </meta-info>

    <description>Send plain text as message payload. Here we use custom data format to send it over HTTP to a server and receive simple plain text as response.</description>

    <actions>
      <parallel>
        <http:send-request client="httpClient">
          <http:POST>
            <http:body>
              <http:data>{
                "type": "read",
                "mbean": "java.lang:type=Memory",
                "attribute": "HeapMemoryUsage",
                "path": "used",
                "lastModified": null,
                "test_array": [
                  {
                    "key_with_identical_values": "identical_value",
                    "key_with_unique_values": "unique_value"
                  },
                  {
                    "key_with_identical_values": "identical_value",
                    "key_with_unique_values": "different_unique_value"
                  }
                ]
              }
              </http:data>
            </http:body>
          </http:POST>
        </http:send-request>

        <sequential>
          <http:receive-request server="httpServerRequestEndpoint">
            <http:POST>
              <http:body type="json">
                <http:validate>
                    <http:json-path expression="$.type" value="read"/>
                    <http:json-path expression="$.mbean" value="java.lang:type=Memory"/>
                    <http:json-path expression="$..attribute" value="HeapMemoryUsage"/>
                    <http:json-path expression="$.path" value="@equalsIgnoreCase('USED')@"/>
                    <http:json-path expression="$.lastModified" value="@assertThat(nullValue())@"/>
                    <http:json-path expression="$..key_with_identical_values" value="@assertThat(hasSize(2))@"/>
                    <http:json-path expression="$..key_with_unique_values" value="@assertThat(hasSize(2))@"/>
                </http:validate>
              </http:body>
            </http:POST>
            <http:extract>
              <http:header name="citrus_jms_messageId" variable="correlation_id"/>
            </http:extract>
          </http:receive-request>

          <http:send-response server="httpServerResponseEndpoint">
            <http:headers status="200" reason-phrase="OK" version="HTTP/1.1">
              <http:header name="citrus_jms_correlationId" value="${correlation_id}"/>
            </http:headers>
            <http:body>
              <http:data>
                {
                  "timestamp" : "2011-01-01",
                  "status" : 200,
                  "request" :
                      {
                        "mbean" : "java.lang:type=Memory",
                        "path" : "used",
                        "attribute" : "HeapMemoryUsage",
                        "type" : "read"
                      },
                  "value" : "512",
                  "lastModified": null
                }
              </http:data>
            </http:body>
          </http:send-response>
        </sequential>
      </parallel>

      <http:receive-response client="httpClient">
        <http:headers status="200" reason-phrase="OK" version="HTTP/1.1"/>
        <http:body type="json">
          <http:data>
            {
              "timestamp" : "@matchesDatePattern('yyyy-MM-dd')@",
              "status" : 200,
              "request" :
                  {
                    "mbean" : "java.lang:type=Memory",
                    "path" : "@matches('u*s*e*d*')@",
                    "attribute" : "HeapMemoryUsage",
                    "type" : "read"
                  },
              "value" : "@isNumber()@",
              "lastModified": "@assertThat(nullValue())@"
            }
          </http:data>
          <http:validate>
              <http:json-path expression="$.timestamp" value="@matchesDatePattern('yyyy-MM-dd')@"/>
              <http:json-path expression="$.request.path" value="@matches('u*s*e*d*')@"/>
              <http:json-path expression="$..attribute" value="HeapMemoryUsage"/>
              <http:json-path expression="$.value" value="@isNumber()@"/>
              <http:json-path expression="$.lastModified" value=""/>
          </http:validate>
        </http:body>
      </http:receive-response>

    </actions>
  </testcase>
</spring:beans>
